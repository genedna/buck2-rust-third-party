load("@prelude//toolchains:rust.bzl", "system_rust_toolchain")
load("@prelude//toolchains:cxx.bzl", "system_cxx_toolchain")

load("//:build.bzl", "get_rust_features")


# C library for zstd
cxx_library(
    name = "zstd_c",
    srcs = glob([
        "zstd/lib/common/*.c",
        "zstd/lib/compress/*.c",
        "zstd/lib/decompress/*.c",
    ]) + select({
        "DEFAULT": ["zstd/lib/decompress/huf_decompress_amd64.S"],
        "ovr_config//os:windows": [],
    }),
    headers = glob([
        "zstd/lib/**/*.h",
        "wasm-shim/**/*.h",
    ]),
    # Use header_namespace and exported_headers instead of include_dirs
    header_namespace = "",
    exported_headers = glob([
        "zstd/lib/**/*.h",
        "wasm-shim/**/*.h",
    ]),
    compiler_flags = [
        "-DZSTD_LIB_DEPRECATED=0",
        "-DXXH_PRIVATE_API",
        "-DZSTDLIB_VISIBILITY=",
        "-DZSTDERRORLIB_VISIBILITY=",
        "-DZDICTLIB_VISIBILITY=",
        "-fvisibility=hidden",
        "-ffunction-sections",
        "-fdata-sections",
        "-fmerge-all-constants",
        # Add include path flags directly as compiler flags
        "-Izstd/lib/",
        "-Izstd/lib/common",
    ],
    # We're creating a static library
    preferred_linkage = "static",
    visibility = [],
)

# Main Rust library
rust_library(
    name = "zstd-sys",
    edition = "2021",
    srcs = glob(["src/**/*.rs"]),
    crate_root = "src/lib.rs",
    features = get_rust_features(),
    rustc_flags = [
        # Add any necessary rustc flags here
    ],
    env = {
        # Environment variables needed for build
    },
    deps = [
        # Internal C library dependency
        ":zstd_c",
        # External dependencies would go here
        # "//third-party/rust/crates/bindgen/0.71.0:bindgen",
        # "//third-party/rust/crates/cc/1.0.45:cc",
        # "//third-party/rust/crates/pkg-config/0.3.28:pkg-config",
    ],
    visibility = ["PUBLIC"],
)

# For use as a build target
alias(
    name = "zstd_sys",
    actual = ":zstd-sys",
    visibility = ["PUBLIC"],
)